Git CommandsU
-------------

SCM ( Source code management)

Popular is Git Hub, Bit bucket, Git Lab, SVN(Sub Version), CVS(concurrent Version system) and TFS (Team foundation Server)

Git hub Vendor is Microsoft.
Big Bucket (Atalassian)
Git Lab ( Git Lab)
TFS - Microsoft.

-- Create Organization

-- create Repo -- >Repo means it is a place where we store the Source code.

We can create more than one Repo for the same Project

Also We can create more than one Teams in Repo.

https://github.com/kallisandhya/Amazon.git  --> HTTPS
git@github.com:kallisandhya/Amazon.git  --> SSH




There are two types of Repo(  Public Repo and Private Repo)

   -- Public Repo  -- anybody can access the Repo
   -- Private Repo -- those who have the access they can access the Repo for that we need to have the 


In Real time we use enterprise edition of Github.

For enterprise edition we will get the web URL like http://ghe.mss.com ( Only that organization employees can able to access the URL)

If any new Project is Onboarded we are going to create new Reposetery.

In Github, We are going to create a Team.

Add Userd to the Team. ( we will get mail from Developer Team and then added to the Team)

Before Adding users in Team the users should create a account to the members.

Provide the access to Repo to the Team.

   Three Levels of Access.
   
       -- Read
	   -- Write
	   -- Admin  --- they can add other user to the Repo.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Open Git Bash

CD ~/desktop
mkdir Amazon
cd Amazon
pwd ( to know the present Working Directory)

git Init --> creates a Local git Repo

Working Area                                     Staging Area                                                   Loal repo

vi Users.java
vi DBUtils.java
vi Deploy.should

workng Area --> The working area is where files that are not handled by git. These files are also referred to as "untracked files.
Staging  Area -->  Staging area is files that are going to be a part of the next commit, which lets git know what changes in the file are 
going to occur for the next commit.
Local Reo --> The Local Repository is everything in your .git directory. Mainly what you will see in your Local Repository are all of your 
checkpoints or commits. It is the area that saves everything (so don’t delete it)

Git status

    git add .(All the Files Going to move the Staging Area)
	git add  
	git add Users.java
	git add *.java

when yu give git Commit command the file save in Local repo from Staging Area.

    git commit -m "Initial Commit" users.java (It will save the file in Local Repo) Here message is mandatory ( -m)
	
	
git config --global user.name "gkalli"  
git config --global user.email "kalligopireddy@gmail.com" 

These two commands we have to execute very first time


git config --global --list

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global --list
user.name=Gopi
user.email=rkgopi89@gmail.com
core.editor=notepad++.exe -multiInst -nosession

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global user.email "kalligopireddy@gmail.com"

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global --list
user.name=Gopi
user.email=kalligopireddy@gmail.com
core.editor=notepad++.exe -multiInst -nosession

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git remote add amazon https://github.com/kallisandhya/Amazon.gitamz (amazon is the alias name here)

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)

$ git remote -v  ( This command will display Repo is mapped to Loca Repo)
amazon  https://github.com/kallisandhya/Amazon.gitamz (fetch)
amazon  https://github.com/kallisandhya/Amazon.gitamz (push)
ft      https://github.com/kallisandhya/Amazon.gitamz (fetch)
ft      https://github.com/kallisandhya/Amazon.gitamz (push)

No Push the Code from Local from Remote Repo.

git push Aliasname Branchname  (Once we run this command the code will move from Local Repo from Remote Repo)

By default Github will create a Branch name as master.


VCS --> Version Controle Systemm( Each Commit will maintain Version ID or Commit ID or Revison ID)

git log --> ( will provide all Commit ID'S)

git show CommitID ( Commit id we can get it from git log or from git hub) --> To diasplay what are the files commited in that

git show  --pretty="" --name-only 9844e4ea8899a6612391e6e00d954dcffa010a37  ( Display only File names which are committed)


git commit -a -m "updated deploy.sh" --> using to add and Commit at a timein local repo ( it will work only for existing files or existing 
commited Files)

HEAD -- > Pointing to the current branch with Latest commitID.

$ git clean -n  --> it will display new created files for delete
Would remove test.py
Would remove test.sh

$ git clean -f  --> It will Delete the files which are newly Created and not updated one
Removing test.py
Removing test.sh

git reset -- > It will get back all the file from Staging area from Working Area

$ git revert 1a5fdbfe1027c08230d86d83f452f9114fc20c99 -- > It will delete unwanted changes files or changes in local Repo

Then We have run below command to come to normal previous state

$ git push Amazon  master -f

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Git Ignore File
.gitignore:
----------


IDE : ( Integrated development Environment)

.gitignore file is used to ignore files or Directories not required, Those will be add into the gitignore file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Branches:

git branch ( To display the branches,create and delete)

git branch development  ( creating development branch)

git checkout BN ( This command will switch to the Branch)

git diff development  ( It will compare master and Development)
master
stage

git diff develoment stage ( Compare development and stage branch)

What is merge conflict ? ( When a file updated same file from both branches)

git checkout -b Stage ( Creating new branch Stage and switch to Stage at a time)

git push Amazon --all ( Comand to push all branches from local repo to Remote Repo)

Git and Github is both are different

GIT is a DVCS ( Distributed version controle system)

git branch -d BN ( this command is to delete the Branch)


git branch -r ( will display remote branches)


Tags:
----

What is the Diff b/w Tags and Branch?

Tags are Immutable and Branches are Mutable (Immutable means Once it is not able to Modify)

When we are going to create Tag?

Tags are going to create after production Deployment

On Which branch We are going to create Tags?

In Master branch only we will create Tags and we are going deploy it from Master Branch.


git tag TN ( command create tag, We can create a tag from Master Branch)

git push Amazon --tags  ( To push Tags to Remote Repo)

git tag -d TN ( To delete a Tag)

-------------------------------------------------------------------------

Repo

Master  We will not work on master branch. 

Development

As a Git Best practise we should not commit half done work. We have to finish the complete development we have test the work and we have to 
commit the woek. 

git stash ( we will use we take the backup what ever code is available in Working area and keep into the temp area)
---------
git stash list ( List out ho many backups are there)

git stash apply ( whatever backup set will applied to the branch)

git stash list

 stash@{0}
 stash@{1}
 stash@{2}
 stash@{3}
 stash@{4}
 
git stash apply ( Will apply the recent backup to the branch)

git stash apply stash@{2}

git stash drop ( Recent backup will be deleted)

git stash drop stash@{1} ( stash 1 will be deleted)

git stash pop ( It will apply apply recent backup and delete at a time)

git stash pop stash@{3} ( the command is for any particlur stash)



git cherry-pick
---------------

development branch   DC1 DC2 DC3 DC4


master Branch

Git merge will use to integrate with Other branch, With this all commits will be merged with Other branch like DC1 DC2 DC3 and DC4

But here I would like to merge only one particlur merge like DC3, In this case we will use cherry-pick

git cherry-pick Commit ID



SSH Key Gen:
------------

When we are doing SSH URL we have to do some configurations


Open the Git Bash 

ssh-keygen ( The Keys will be store )

~/.ssh/ 
id_rsa    ---> Private Key
id_rsa.pub  ---> Public Key


ssh-keygen -t dsa ( DSA ia another Algorithem like as RSA)

id_dsa
id_dsa.pub


it will store into that user home directory

cat /.ssh/id_rsa.pub  -- > to read ssh public key

ssh -T git@github.com  ( in git bash)


In Real Time:

ssh -T git@ghe.mss.com

Example:

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ls -la ~/.ssh
ls: cannot access '/c/Users/gkalli/.ssh': No such file or directory

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/gkalli/.ssh/id_rsa):
Created directory '/c/Users/gkalli/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/gkalli/.ssh/id_rsa
Your public key has been saved in /c/Users/gkalli/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:cyhKFutwGpSsyIP24a7UA1YZMFLLbhAcmqT9/nxKaJk EAD+gkalli@INPF1XMCH0
The key's randomart image is:
+---[RSA 3072]----+
|+*+.             |
|=B.oo            |
|= Bo.            |
|+=.. o   .       |
|+*=.* . S .      |
|o.*X.= . o       |
| ..=E .          |
|. ...+  .        |
| ...  +o         |
+----[SHA256]-----+

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ls -la ~/.ssh
total 17
drwxr-xr-x 1 EAD+gkalli 1073742337    0 Feb  4 16:36 ./
drwxr-xr-x 1 EAD+gkalli 1073742337    0 Feb  4 16:36 ../
-rw-r--r-- 1 EAD+gkalli 1073742337 2610 Feb  4 16:36 id_rsa
-rw-r--r-- 1 EAD+gkalli 1073742337  575 Feb  4 16:36 id_rsa.pub

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbfj8JQvt5FFjbJe6LHIWC/3SqW0ScbXq44GpBbNCDmgVMgpZimB0WTxtKAEmrtg0JrOQg+ZkXzKkdXhvSSMvRA35oOWwOENESGRdMJ7MGHhKUrJQSJxlNWO7UtcB3glzdJMX3CWVX0Hbd3rkRArDQgMFfSh4jAEWLLv96aVwGVzbWd08qgE1co8Jfe75EgJA5CaL5n1odla5fkR3WiibE6qlAKc3uNZIB33OYpR3KFr7ju2L/jioMj4M3yZ8nXmVRui/wgJlmN8p1teMo+GbqWeDZYsC4ZnhigtFmSCrJFex6jjbtZ+p90DFaMao9OZI4mJUj9Ej0jOq7nYrxQ3i28y9Ap7mGGJKwvzcxiOZsXchLexUDFOFXIVIO13L3BOSBVkyZcxsKLLdSmnvc4+bzZ+FSuwIzgPXmC+pYiYE1ND/lZQ02ObIchQAfviuxCdDTnkZRLu3dhW+x9R5dnUrqSFMq8qpTXh7ABhzaFpq054KbjL8xKyZcW4sJ9CkePOE= EAD+gkalli@INPF1XMCH0

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ssh -T git@github.com
The authenticity of host 'github.com (13.234.210.38)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'github.com,13.234.210.38' (RSA) to the list of known hosts.
Hi Kalligopireddy! You've successfully authenticated, but GitHub does not provide shell access.

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote -v
Amazon  https://github.com/kallisandhya/Amazon.git (fetch)
Amazon  https://github.com/kallisandhya/Amazon.git (push)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote add Amz git@github.com:kallisandhya/Amazon.git

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote -v
Amazon  https://github.com/kallisandhya/Amazon.git (fetch)
Amazon  https://github.com/kallisandhya/Amazon.git (push)
Amz     git@github.com:kallisandhya/Amazon.git (fetch)
Amz     git@github.com:kallisandhya/Amazon.git (push)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git push Amz --all
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 376 bytes | 94.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:kallisandhya/Amazon.git
   c6f5e26..a1efc47  master -> master

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)


PAT: ( Personal Access Token)
-----------------------------

We are going to create in Git Hub Server. Instead of Password we will use PAT.

cd60d41a5e56e6e2c4c7fe3769c5ccd94ee3b004  (PAT Key) ---> Instead of password we can give PAT while PUSH.

We can use PAT for Git hub API.

Git HUB API:
------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Get the code from Remotee repo to Local Repo.


git clone --> Command is used to get entire code from Remote Repo from Local Work  space

git pull or git fetch -->  is used to get updated files information from Remote Repo.

git fetch:   Remote Repo to Local Repo
--------


Remote Repo ------------- 
     |                   |   
     |                   |
     |  Git Fetch        |
     |                   |
     |                   |  Git PULL
Local Repo               |
     |                   |
     |   Git Merge       |
     |                   |
Working area-------------



Git Pull = Git Fetch + Git Merge:

We will use Git pull when we dont have any update in Working area that time we will use Git Pull.























 


 
 





 



























	
	
	
	
	
	







	   

	   
	   
   
	   
	
 







Git CommandsU
-------------

SCM ( Source code management)

Popular is Git Hub, Bit bucket, Git Lab, SVN(Sub Version), CVS(concurrent Version system) and TFS (Team foundation Server)

Git hub Vendor is Microsoft.
Big Bucket (Atalassian)
Git Lab ( Git Lab)
TFS - Microsoft.

-- Create Organization

-- create Repo -- >Repo means it is a place where we store the Source code.

We can create more than one Repo for the same Project

Also We can create more than one Teams in Repo.

https://github.com/kallisandhya/Amazon.git  --> HTTPS
git@github.com:kallisandhya/Amazon.git  --> SSH




There are two types of Repo(  Public Repo and Private Repo)

   -- Public Repo  -- anybody can access the Repo
   -- Private Repo -- those who have the access they can access the Repo for that we need to have the 


In Real time we use enterprise edition of Github.

For enterprise edition we will get the web URL like http://ghe.mss.com ( Only that organization employees can able to access the URL)

If any new Project is Onboarded we are going to create new Reposetery.

In Github, We are going to create a Team.

Add Userd to the Team. ( we will get mail from Developer Team and then added to the Team)

Before Adding users in Team the users should create a account to the members.

Provide the access to Repo to the Team.

   Three Levels of Access.
   
       -- Read
	   -- Write
	   -- Admin  --- they can add other user to the Repo.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Open Git Bash

CD ~/desktop
mkdir Amazon
cd Amazon
pwd ( to know the present Working Directory)

git Init --> creates a Local git Repo

Working Area                                     Staging Area                                                   Loal repo

vi Users.java
vi DBUtils.java
vi Deploy.should

workng Area --> The working area is where files that are not handled by git. These files are also referred to as "untracked files.
Staging  Area -->  Staging area is files that are going to be a part of the next commit, which lets git know what changes in the file are 
going to occur for the next commit.
Local Reo --> The Local Repository is everything in your .git directory. Mainly what you will see in your Local Repository are all of your 
checkpoints or commits. It is the area that saves everything (so don’t delete it)

Git status

    git add .(All the Files Going to move the Staging Area)
	git add  
	git add Users.java
	git add *.java

when yu give git Commit command the file save in Local repo from Staging Area.

    git commit -m "Initial Commit" users.java (It will save the file in Local Repo) Here message is mandatory ( -m)
	
	
git config --global user.name "gkalli"  
git config --global user.email "kalligopireddy@gmail.com" 

These two commands we have to execute very first time


git config --global --list

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global --list
user.name=Gopi
user.email=rkgopi89@gmail.com
core.editor=notepad++.exe -multiInst -nosession

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global user.email "kalligopireddy@gmail.com"

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git config --global --list
user.name=Gopi
user.email=kalligopireddy@gmail.com
core.editor=notepad++.exe -multiInst -nosession

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)
$ git remote add amazon https://github.com/kallisandhya/Amazon.gitamz (amazon is the alias name here)

EAD+gkalli@INPF1XMCH0 MINGW64 ~ (master)

$ git remote -v  ( This command will display Repo is mapped to Loca Repo)
amazon  https://github.com/kallisandhya/Amazon.gitamz (fetch)
amazon  https://github.com/kallisandhya/Amazon.gitamz (push)
ft      https://github.com/kallisandhya/Amazon.gitamz (fetch)
ft      https://github.com/kallisandhya/Amazon.gitamz (push)

No Push the Code from Local from Remote Repo.

git push Aliasname Branchname  (Once we run this command the code will move from Local Repo from Remote Repo)

By default Github will create a Branch name as master.


VCS --> Version Controle Systemm( Each Commit will maintain Version ID or Commit ID or Revison ID)

git log --> ( will provide all Commit ID'S)

git show CommitID ( Commit id we can get it from git log or from git hub) --> To diasplay what are the files commited in that

git show  --pretty="" --name-only 9844e4ea8899a6612391e6e00d954dcffa010a37  ( Display only File names which are committed)


git commit -a -m "updated deploy.sh" --> using to add and Commit at a timein local repo ( it will work only for existing files or existing 
commited Files)

HEAD -- > Pointing to the current branch with Latest commitID.

$ git clean -n  --> it will display new created files for delete
Would remove test.py
Would remove test.sh

$ git clean -f  --> It will Delete the files which are newly Created and not updated one
Removing test.py
Removing test.sh

git reset -- > It will get back all the file from Staging area from Working Area

$ git revert 1a5fdbfe1027c08230d86d83f452f9114fc20c99 -- > It will delete unwanted changes files or changes in local Repo

Then We have run below command to come to normal previous state

$ git push Amazon  master -f

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Git Ignore File
.gitignore:
----------


IDE : ( Integrated development Environment)

.gitignore file is used to ignore files or Directories not required, Those will be add into the gitignore file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Branches:

git branch ( To display the branches,create and delete)

git branch development  ( creating development branch)

git checkout BN ( This command will switch to the Branch)

git diff development  ( It will compare master and Development)
master
stage

git diff develoment stage ( Compare development and stage branch)

What is merge conflict ? ( When a file updated same file from both branches)

git checkout -b Stage ( Creating new branch Stage and switch to Stage at a time)

git push Amazon --all ( Comand to push all branches from local repo to Remote Repo)

Git and Github is both are different

GIT is a DVCS ( Distributed version controle system)

git branch -d BN ( this command is to delete the Branch)


git branch -r ( will display remote branches)


Tags:
----

What is the Diff b/w Tags and Branch?

Tags are Immutable and Branches are Mutable (Immutable means Once it is not able to Modify)

When we are going to create Tag?

Tags are going to create after production Deployment

On Which branch We are going to create Tags?

In Master branch only we will create Tags and we are going deploy it from Master Branch.


git tag TN ( command create tag, We can create a tag from Master Branch)

git push Amazon --tags  ( To push Tags to Remote Repo)

git tag -d TN ( To delete a Tag)

-------------------------------------------------------------------------

Repo

Master  We will not work on master branch. 

Development

As a Git Best practise we should not commit half done work. We have to finish the complete development we have test the work and we have to 
commit the woek. 

git stash ( we will use we take the backup what ever code is available in Working area and keep into the temp area)
---------
git stash list ( List out ho many backups are there)

git stash apply ( whatever backup set will applied to the branch)

git stash list

 stash@{0}
 stash@{1}
 stash@{2}
 stash@{3}
 stash@{4}
 
git stash apply ( Will apply the recent backup to the branch)

git stash apply stash@{2}

git stash drop ( Recent backup will be deleted)

git stash drop stash@{1} ( stash 1 will be deleted)

git stash pop ( It will apply apply recent backup and delete at a time)

git stash pop stash@{3} ( the command is for any particlur stash)



git cherry-pick
---------------

development branch   DC1 DC2 DC3 DC4


master Branch

Git merge will use to integrate with Other branch, With this all commits will be merged with Other branch like DC1 DC2 DC3 and DC4

But here I would like to merge only one particlur merge like DC3, In this case we will use cherry-pick

git cherry-pick Commit ID



SSH Key Gen:
------------

When we are doing SSH URL we have to do some configurations


Open the Git Bash 

ssh-keygen ( The Keys will be store )

~/.ssh/ 
id_rsa    ---> Private Key
id_rsa.pub  ---> Public Key


ssh-keygen -t dsa ( DSA ia another Algorithem like as RSA)

id_dsa
id_dsa.pub


it will store into that user home directory

cat /.ssh/id_rsa.pub  -- > to read ssh public key

ssh -T git@github.com  ( in git bash)


In Real Time:

ssh -T git@ghe.mss.com

Example:

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ls -la ~/.ssh
ls: cannot access '/c/Users/gkalli/.ssh': No such file or directory

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/gkalli/.ssh/id_rsa):
Created directory '/c/Users/gkalli/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/gkalli/.ssh/id_rsa
Your public key has been saved in /c/Users/gkalli/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:cyhKFutwGpSsyIP24a7UA1YZMFLLbhAcmqT9/nxKaJk EAD+gkalli@INPF1XMCH0
The key's randomart image is:
+---[RSA 3072]----+
|+*+.             |
|=B.oo            |
|= Bo.            |
|+=.. o   .       |
|+*=.* . S .      |
|o.*X.= . o       |
| ..=E .          |
|. ...+  .        |
| ...  +o         |
+----[SHA256]-----+

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ls -la ~/.ssh
total 17
drwxr-xr-x 1 EAD+gkalli 1073742337    0 Feb  4 16:36 ./
drwxr-xr-x 1 EAD+gkalli 1073742337    0 Feb  4 16:36 ../
-rw-r--r-- 1 EAD+gkalli 1073742337 2610 Feb  4 16:36 id_rsa
-rw-r--r-- 1 EAD+gkalli 1073742337  575 Feb  4 16:36 id_rsa.pub

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbfj8JQvt5FFjbJe6LHIWC/3SqW0ScbXq44GpBbNCDmgVMgpZimB0WTxtKAEmrtg0JrOQg+ZkXzKkdXhvSSMvRA35oOWwOENESGRdMJ7MGHhKUrJQSJxlNWO7UtcB3glzdJMX3CWVX0Hbd3rkRArDQgMFfSh4jAEWLLv96aVwGVzbWd08qgE1co8Jfe75EgJA5CaL5n1odla5fkR3WiibE6qlAKc3uNZIB33OYpR3KFr7ju2L/jioMj4M3yZ8nXmVRui/wgJlmN8p1teMo+GbqWeDZYsC4ZnhigtFmSCrJFex6jjbtZ+p90DFaMao9OZI4mJUj9Ej0jOq7nYrxQ3i28y9Ap7mGGJKwvzcxiOZsXchLexUDFOFXIVIO13L3BOSBVkyZcxsKLLdSmnvc4+bzZ+FSuwIzgPXmC+pYiYE1ND/lZQ02ObIchQAfviuxCdDTnkZRLu3dhW+x9R5dnUrqSFMq8qpTXh7ABhzaFpq054KbjL8xKyZcW4sJ9CkePOE= EAD+gkalli@INPF1XMCH0

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ ssh -T git@github.com
The authenticity of host 'github.com (13.234.210.38)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'github.com,13.234.210.38' (RSA) to the list of known hosts.
Hi Kalligopireddy! You've successfully authenticated, but GitHub does not provide shell access.

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote -v
Amazon  https://github.com/kallisandhya/Amazon.git (fetch)
Amazon  https://github.com/kallisandhya/Amazon.git (push)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote add Amz git@github.com:kallisandhya/Amazon.git

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git remote -v
Amazon  https://github.com/kallisandhya/Amazon.git (fetch)
Amazon  https://github.com/kallisandhya/Amazon.git (push)
Amz     git@github.com:kallisandhya/Amazon.git (fetch)
Amz     git@github.com:kallisandhya/Amazon.git (push)

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)
$ git push Amz --all
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 376 bytes | 94.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:kallisandhya/Amazon.git
   c6f5e26..a1efc47  master -> master

EAD+gkalli@INPF1XMCH0 MINGW64 ~/Desktop/Gopi (master)


PAT: ( Personal Access Token)
-----------------------------

We are going to create in Git Hub Server. Instead of Password we will use PAT.

cd60d41a5e56e6e2c4c7fe3769c5ccd94ee3b004  (PAT Key) ---> Instead of password we can give PAT while PUSH.

We can use PAT for Git hub API.

Git HUB API:
------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Get the code from Remotee repo to Local Repo.


git clone --> Command is used to get entire code from Remote Repo from Local Work  space

git pull or git fetch -->  is used to get updated files information from Remote Repo.

git fetch:   Remote Repo to Local Repo
--------


Remote Repo ------------- 
     |                   |   
     |                   |
     |  Git Fetch        |
     |                   |
     |                   |  Git PULL
Local Repo               |
     |                   |
     |   Git Merge       |
     |                   |
Working area-------------



Git Pull = Git Fetch + Git Merge:

We will use Git pull when we dont have any update in Working area that time we will use Git Pull.























 


 
 





 



























	
	
	
	
	
	







	   

	   
	   
   
	   
	
 







